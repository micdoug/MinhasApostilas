/*
 * Orm4Qt - An Object Relational Mapping Library for the Qt Framework
 * Copyright (c) 2014, Michael Dougras da Silva, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

#include "sqlprovider.h"
#include <QUuid>
#include <QSqlDatabase>

using namespace Orm4Qt;

/**
 * Constructor that initializes the database connection name of this instance of provider with a unique identifier.
 */
SqlProvider::SqlProvider()
{
    while(true)
    {
        QUuid id = QUuid::createUuid();
        QSqlDatabase db = QSqlDatabase::database(id.toString());
        if(!db.isValid())
        {
            m_databaseConnectionName = id.toString();
            break;
        }
    }
}

/**
 * Close the database connection associated with this instance of sql provider.
 */
SqlProvider::~SqlProvider()
{
    {
        QSqlDatabase db = QSqlDatabase::database(m_databaseConnectionName, false);
        if(db.isValid())
        {
            if(db.isOpen())
            {
                db.close();
            }
        }
    }
    QSqlDatabase::removeDatabase(m_databaseConnectionName);
}

/**
 * Method for access the database connection name associated with this instance of the provider.
 * @return
 * The name of the connection associated with this instance of provider.
 */
QString SqlProvider::databaseConnectionName() const
{
    return m_databaseConnectionName;
}

/**
 * Method for access the object with the description of the last error generated by this instance of provider.
 * @return
 * The error descriptor.
 */
std::shared_ptr<OrmError> SqlProvider::lastError() const
{
    return m_lastError;
}

