// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef DOCUMENTO_ODB_HXX
#define DOCUMENTO_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2030000 // 2.3.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/pgsql/qstring-traits.hxx>
#include <odb/qt/basic/pgsql/qbyte-array-traits.hxx>
#include <odb/qt/basic/pgsql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-traits.hxx>
#include <odb/qt/date-time/pgsql/qtime-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include "documento.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Documento
  //
  template <>
  struct class_traits< ::Entidades::Documento >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Entidades::Documento >
  {
    public:
    typedef ::Entidades::Documento object_type;
    typedef ::std::unique_ptr< ::Entidades::Documento > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::qlonglong id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DocumentoInfo
  //
  template <>
  struct class_traits< ::Entidades::DocumentoInfo >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::Entidades::DocumentoInfo >
  {
    public:
    typedef ::Entidades::DocumentoInfo view_type;
    typedef ::QSharedPointer< ::Entidades::DocumentoInfo > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // DocumentoView
  //
  template <>
  struct class_traits< ::Entidades::DocumentoView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::Entidades::DocumentoView >
  {
    public:
    typedef ::Entidades::DocumentoView view_type;
    typedef ::QSharedPointer< ::Entidades::DocumentoView > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Documento
  //
  template <typename A>
  struct query_columns< ::Entidades::Documento, id_pgsql, A >
  {
    // codigo
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::qlonglong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    codigo_type_;

    static const codigo_type_ codigo;

    // nome
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    nome_type_;

    static const nome_type_ nome;

    // descricao
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    descricao_type_;

    static const descricao_type_ descricao;

    // ultimaAlteracao
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QDateTime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    ultimaAlteracao_type_;

    static const ultimaAlteracao_type_ ultimaAlteracao;

    // versao
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint16,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    versao_type_;

    static const versao_type_ versao;

    // arquivo
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QByteArray,
        pgsql::id_bytea >::query_type,
      pgsql::id_bytea >
    arquivo_type_;

    static const arquivo_type_ arquivo;
  };

  template <typename A>
  const typename query_columns< ::Entidades::Documento, id_pgsql, A >::codigo_type_
  query_columns< ::Entidades::Documento, id_pgsql, A >::
  codigo (A::table_name, "\"c_codigo\"", 0);

  template <typename A>
  const typename query_columns< ::Entidades::Documento, id_pgsql, A >::nome_type_
  query_columns< ::Entidades::Documento, id_pgsql, A >::
  nome (A::table_name, "\"c_nome\"", 0);

  template <typename A>
  const typename query_columns< ::Entidades::Documento, id_pgsql, A >::descricao_type_
  query_columns< ::Entidades::Documento, id_pgsql, A >::
  descricao (A::table_name, "\"c_descricao\"", 0);

  template <typename A>
  const typename query_columns< ::Entidades::Documento, id_pgsql, A >::ultimaAlteracao_type_
  query_columns< ::Entidades::Documento, id_pgsql, A >::
  ultimaAlteracao (A::table_name, "\"c_ultimaalteracao\"", 0);

  template <typename A>
  const typename query_columns< ::Entidades::Documento, id_pgsql, A >::versao_type_
  query_columns< ::Entidades::Documento, id_pgsql, A >::
  versao (A::table_name, "\"c_versao\"", 0);

  template <typename A>
  const typename query_columns< ::Entidades::Documento, id_pgsql, A >::arquivo_type_
  query_columns< ::Entidades::Documento, id_pgsql, A >::
  arquivo (A::table_name, "\"c_arquivo\"", 0);

  template <typename A>
  struct pointer_query_columns< ::Entidades::Documento, id_pgsql, A >:
    query_columns< ::Entidades::Documento, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Entidades::Documento, id_pgsql >:
    public access::object_traits< ::Entidades::Documento >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // m_codigo
      //
      long long m_codigo_value;
      bool m_codigo_null;

      // m_nome
      //
      details::buffer m_nome_value;
      std::size_t m_nome_size;
      bool m_nome_null;

      // m_descricao
      //
      details::buffer m_descricao_value;
      std::size_t m_descricao_size;
      bool m_descricao_null;

      // m_ultimaAlteracao
      //
      long long m_ultimaAlteracao_value;
      bool m_ultimaAlteracao_null;

      // m_versao
      //
      short m_versao_value;
      bool m_versao_null;

      // m_arquivo
      //
      details::buffer m_arquivo_value;
      std::size_t m_arquivo_size;
      bool m_arquivo_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Entidades::Documento, id_common >:
    public access::object_traits_impl< ::Entidades::Documento, id_pgsql >
  {
  };

  // DocumentoInfo
  //
  template <>
  class access::view_traits_impl< ::Entidades::DocumentoInfo, id_pgsql >:
    public access::view_traits< ::Entidades::DocumentoInfo >
  {
    public:
    struct image_type
    {
      // quantidade
      //
      long long quantidade_value;
      bool quantidade_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::Entidades::DocumentoInfo, id_common >:
    public access::view_traits_impl< ::Entidades::DocumentoInfo, id_pgsql >
  {
  };

  // DocumentoView
  //
  template <>
  class access::view_traits_impl< ::Entidades::DocumentoView, id_pgsql >:
    public access::view_traits< ::Entidades::DocumentoView >
  {
    public:
    struct image_type
    {
      // codigo
      //
      long long codigo_value;
      bool codigo_null;

      // nome
      //
      details::buffer nome_value;
      std::size_t nome_size;
      bool nome_null;

      // descricao
      //
      details::buffer descricao_value;
      std::size_t descricao_size;
      bool descricao_null;

      // ultimaAlteracao
      //
      long long ultimaAlteracao_value;
      bool ultimaAlteracao_null;

      // versao
      //
      short versao_value;
      bool versao_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 5UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::Entidades::DocumentoView, id_common >:
    public access::view_traits_impl< ::Entidades::DocumentoView, id_pgsql >
  {
  };

  // Documento
  //
  // DocumentoInfo
  //
  struct access::view_traits_impl< ::Entidades::DocumentoInfo, id_pgsql >::query_columns:
    odb::pointer_query_columns<
      ::Entidades::Documento,
      id_pgsql,
      odb::access::object_traits_impl< ::Entidades::Documento, id_pgsql > >
  {
  };

  // DocumentoView
  //
  struct access::view_traits_impl< ::Entidades::DocumentoView, id_pgsql >::query_columns:
    odb::pointer_query_columns<
      ::Entidades::Documento,
      id_pgsql,
      odb::access::object_traits_impl< ::Entidades::Documento, id_pgsql > >
  {
  };
}

#include "documento-odb.ixx"

#include <odb/post.hxx>

#endif // DOCUMENTO_ODB_HXX
